import { TransactionType } from '../types/transactions/base';
import { ABIType } from './abi_type';
export declare function abiTypeIsTransaction(type: string): type is TransactionType;
export interface ABIMethodParams {
    name: string;
    desc?: string;
    args: Array<{
        type: string;
        name?: string;
        desc?: string;
    }>;
    returns: {
        type: string;
        desc?: string;
    };
}
export declare type ABIArgumentType = ABIType | TransactionType;
export declare type ABIReturnType = ABIType | 'void';
export declare class ABIMethod {
    readonly name: string;
    readonly description?: string;
    readonly args: Array<{
        type: ABIArgumentType;
        name?: string;
        description?: string;
    }>;
    readonly returns: {
        type: ABIReturnType;
        description?: string;
    };
    constructor(params: ABIMethodParams);
    getSignature(): string;
    getSelector(): Uint8Array;
    txnCount(): number;
    toJSON(): ABIMethodParams;
    static fromSignature(signature: string): ABIMethod;
}
