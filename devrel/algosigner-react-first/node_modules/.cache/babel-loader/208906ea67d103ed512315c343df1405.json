{"ast":null,"code":"var _jsxFileName = \"/Users/jason/code/smartcontracts/smart-contracts/devrel/algosigner-react-first/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message, Input, Form, Dropdown } from \"semantic-ui-react\";\nimport React, { Component, useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst languageOptions = [{\n  key: 'eng',\n  text: 'English',\n  value: 'eng'\n}, {\n  key: 'spn',\n  text: 'Spanish',\n  value: 'spn'\n}, {\n  key: 'rus',\n  text: 'Russian',\n  value: 'Russian'\n}];\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ExampleAlgoSigner, \"glImgLaU2WkF8kj4KKA+v9eKfvY=\");\n\n_c = ExampleAlgoSigner;\n\nconst AlgoSignerSign = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s2();\n\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(AlgoSignerSign, \"glImgLaU2WkF8kj4KKA+v9eKfvY=\");\n\n_c2 = AlgoSignerSign;\n\nclass AccountsDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = (e, data) => {\n      console.log(\"test\" + data.value);\n      this.setState({\n        selected: data.value\n      });\n    };\n\n    this.onSearchChange = (e, data) => {\n      console.log(data.searchQuery);\n      this.setState({\n        searchQuery: data.searchQuery\n      });\n    };\n\n    this.state = {\n      searchQuery: '',\n      selected: null\n    };\n  }\n\n  render() {\n    const {\n      searchQuery,\n      selected\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Dropdown, {\n        button: true,\n        className: \"icon\",\n        fluid: true,\n        labeled: true,\n        icon: \"world\",\n        options: languageOptions,\n        search: true,\n        text: searchQuery,\n        searchQuery: searchQuery,\n        value: selected,\n        onChange: this.onChange,\n        onSearchChange: this.onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass SignTransaction extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello, \", this.props.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this);\n  }\n\n} // The following components are all demonstrating some features of AlgoSigner\n\n\nconst CheckAlgoSigner = () => {\n  _s3();\n\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CheckAlgoSigner\",\n    buttonText: \"Check\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(CheckAlgoSigner, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c3 = CheckAlgoSigner;\n\nconst GetAccounts = () => {\n  _s4();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    return JSON.stringify(accts, null, 2);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Accounts\",\n    buttonText: \"Check Wallet Accounts\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 10\n  }, this);\n};\n\n_s4(GetAccounts, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c4 = GetAccounts;\n\nconst SignForm = () => {\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        icon: \"user\",\n        iconPosition: \"left\",\n        placeholder: \"From Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        icon: \"user\",\n        iconPosition: \"left\",\n        placeholder: \"To Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        icon: \"money bill alternate\",\n        iconPosition: \"left\",\n        placeholder: \"Amount in microAlgos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        icon: \"sticky note outline\",\n        iconPosition: \"left\",\n        placeholder: \"Enter Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 11\n  }, this);\n};\n\n_c5 = SignForm;\n\nconst GetParams = () => {\n  _s5();\n\n  const action = useCallback(async () => {\n    try {\n      const r = await AlgoSigner.algod({\n        ledger: 'TestNet',\n        path: `/v2/transactions/params`\n      });\n      return JSON.stringify(r, null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Transaction Params\",\n    buttonText: \"Get Transaction Params\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 10\n  }, this);\n};\n\n_s5(GetParams, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c6 = GetParams;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h1\",\n      dividing: true,\n      children: \"First Transaction React Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The Pure Stake Team provide many examples using AlgoSigner. See \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://purestake.github.io/algosigner-dapp-example\",\n        children: \"https://purestake.github.io/algosigner-dapp-example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this), \" for more examples.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccountsDropdown, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n\n_c7 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"AlgoSignerSign\");\n$RefreshReg$(_c3, \"CheckAlgoSigner\");\n$RefreshReg$(_c4, \"GetAccounts\");\n$RefreshReg$(_c5, \"SignForm\");\n$RefreshReg$(_c6, \"GetParams\");\n$RefreshReg$(_c7, \"App\");","map":{"version":3,"sources":["/Users/jason/code/smartcontracts/smart-contracts/devrel/algosigner-react-first/src/App.js"],"names":["Button","Container","Header","Message","Input","Form","Dropdown","React","Component","useState","useCallback","languageOptions","key","text","value","ExampleAlgoSigner","title","buttonText","buttonAction","result","setResult","onClick","r","AlgoSignerSign","AccountsDropdown","constructor","props","onChange","e","data","console","log","setState","selected","onSearchChange","searchQuery","state","render","SignTransaction","name","CheckAlgoSigner","action","AlgoSigner","GetAccounts","connect","ledger","accts","accounts","JSON","stringify","SignForm","GetParams","algod","path","error","App"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\nimport './App.css';\nimport {Button, Container, Header, Message, Input, Form, Dropdown} from \"semantic-ui-react\";\nimport React, {Component, useState, useCallback} from \"react\";\n\nconst languageOptions = [\n  { key: 'eng', text: 'English', value: 'eng' },\n  { key: 'spn', text: 'Spanish', value: 'spn' },\n  { key: 'rus', text: 'Russian', value: 'Russian' },\n]\n\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\n  const [result, setResult] = useState(\"\");\n\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n\n  return (\n    <>\n      <Header as=\"h2\" dividing>{title}</Header>\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\n      <Message>\n        <code>\n          {result}\n        </code>\n      </Message>\n    </>\n  );\n};\n\n\n\nconst AlgoSignerSign = ({title, buttonText, buttonAction}) => {\n  const [result, setResult] = useState(\"\");\n\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n\n  return (\n    <>\n      <Header as=\"h2\" dividing>{title}</Header>\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\n      <Message>\n        <code>\n          {result}\n        </code>\n      </Message>\n    </>\n  );\n};\n\n\nclass AccountsDropdown extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuery: '',\n      selected: null\n    }\n  }\n\n  onChange = (e, data) => {\n    console.log(\"test\" + data.value);\n    this.setState({ selected: data.value });\n  }\n\n  onSearchChange = (e, data) => {\n    console.log(data.searchQuery);\n    this.setState({ searchQuery: data.searchQuery });\n  }\n\n  render() {\n    const { searchQuery, selected } = this.state;\n    return (\n      <div>\n        <Dropdown\n          button\n          className='icon'\n          fluid\n          labeled\n          icon='world'\n          options={languageOptions}\n          search\n          text={searchQuery}\n          searchQuery={searchQuery}\n          value={selected}\n          onChange={this.onChange}\n          onSearchChange={this.onSearchChange}\n        />\n      </div>\n    );\n  }\n}\n\n\n\n\nclass SignTransaction extends Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n\n// The following components are all demonstrating some features of AlgoSigner\n\nconst CheckAlgoSigner = () => {\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n\n  return <ExampleAlgoSigner title=\"CheckAlgoSigner\" buttonText=\"Check\" buttonAction={action}/>\n};\n\nconst GetAccounts = () => {\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    return JSON.stringify(accts, null, 2);\n  }, []);\n\n  return <ExampleAlgoSigner title=\"Get Accounts\" buttonText=\"Check Wallet Accounts\" buttonAction={action}/>\n};\n\n\n\nconst SignForm = () => {\n   return <Form>\n    <Form.Field>\n      <Input icon='user' iconPosition='left' placeholder='From Account' />\n    </Form.Field>\n    <Form.Field>\n      <Input icon='user' iconPosition='left' placeholder='To Account' />\n    </Form.Field>\n    <Form.Field>\n      <Input icon='money bill alternate' iconPosition='left' placeholder='Amount in microAlgos' />\n    </Form.Field>\n    <Form.Field>\n      <Input icon='sticky note outline' iconPosition='left' placeholder='Enter Note' />\n    </Form.Field>\n\n    <Button primary={true} type='submit'>Submit</Button>\n  </Form>\n};\n\n\n\nconst GetParams = () => {\n  const action = useCallback(async () => {\n    try {\n      const r = await AlgoSigner.algod({\n        ledger: 'TestNet',\n        path: `/v2/transactions/params`\n      });\n      return JSON.stringify(r, null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, []);\n\n  return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\n};\n\n\nconst App = () => {\n  return (\n    <Container className=\"App\">\n      <Header as=\"h1\" dividing>First Transaction React Example</Header>\n      <p>\n        The Pure Stake Team provide many examples using AlgoSigner.\n        See <a\n        href=\"https://purestake.github.io/algosigner-dapp-example\">https://purestake.github.io/algosigner-dapp-example</a> for\n        more examples.\n      </p>\n      <AccountsDropdown/>\n      <SignForm/>\n\n    </Container>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}