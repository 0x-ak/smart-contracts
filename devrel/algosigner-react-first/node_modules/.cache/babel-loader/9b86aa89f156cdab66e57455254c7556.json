{"ast":null,"code":"var _jsxFileName = \"/Users/jason/code/smartcontracts/smart-contracts/devrel/algosigner-react-first/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message, Input, Form, Dropdown } from \"semantic-ui-react\";\nimport React, { Component, useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst appId = 13793863;\n/**\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\n * and a message with the result.\n *\n * @param buttonAction is a (potentially async) function called when clicking on the button\n *   and returning the result to be displayed\n */\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ExampleAlgoSigner, \"glImgLaU2WkF8kj4KKA+v9eKfvY=\");\n\n_c = ExampleAlgoSigner;\n\nconst AlgoSignerSign = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s2();\n\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(AlgoSignerSign, \"glImgLaU2WkF8kj4KKA+v9eKfvY=\");\n\n_c2 = AlgoSignerSign;\n\nconst AccountsDropdown = () => {\n  _s3();\n\n  const [options, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    var result = [];\n\n    for (let i in accts) result.push([i, accts[i]]);\n\n    setResult(result);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"return (\", /*#__PURE__*/_jsxDEV(Dropdown, {\n      onClick: this.onClick,\n      selection: true,\n      options: this.state.options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), \")\"]\n  }, void 0, true);\n};\n\n_s3(AccountsDropdown, \"p00qbO7461JzSzVKzDLx4rlgs/Q=\");\n\n_c3 = AccountsDropdown;\n\nclass SignTransaction extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Hello, \", this.props.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }, this);\n  }\n\n} // The following components are all demonstrating some features of AlgoSigner\n\n\nconst CheckAlgoSigner = () => {\n  _s4();\n\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CheckAlgoSigner\",\n    buttonText: \"Check\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 10\n  }, this);\n};\n\n_s4(CheckAlgoSigner, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c4 = CheckAlgoSigner;\n\nconst GetAccounts = () => {\n  _s5();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    return JSON.stringify(accts, null, 2);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Accounts\",\n    buttonText: \"Check Wallet Accounts\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 10\n  }, this);\n};\n\n_s5(GetAccounts, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c5 = GetAccounts;\n\nconst SignForm = () => {\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        icon: \"user\",\n        iconPosition: \"left\",\n        placeholder: \"From Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        icon: \"user\",\n        iconPosition: \"left\",\n        placeholder: \"To Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        icon: \"money bill alternate\",\n        iconPosition: \"left\",\n        placeholder: \"Amount in microAlgos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        icon: \"sticky note outline\",\n        iconPosition: \"left\",\n        placeholder: \"Enter Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 11\n  }, this);\n};\n\n_c6 = SignForm;\n\nconst GetParams = () => {\n  _s6();\n\n  const action = useCallback(async () => {\n    try {\n      const r = await AlgoSigner.algod({\n        ledger: 'TestNet',\n        path: `/v2/transactions/params`\n      });\n      return JSON.stringify(r, null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Transaction Params\",\n    buttonText: \"Get Transaction Params\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 10\n  }, this);\n};\n\n_s6(GetParams, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c7 = GetParams;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h1\",\n      dividing: true,\n      children: \"First Transaction React Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The Pure Stake Team provide many examples using AlgoSigner. See \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://purestake.github.io/algosigner-dapp-example\",\n        children: \"https://purestake.github.io/algosigner-dapp-example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), \" for more examples.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SignForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n\n_c8 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"AlgoSignerSign\");\n$RefreshReg$(_c3, \"AccountsDropdown\");\n$RefreshReg$(_c4, \"CheckAlgoSigner\");\n$RefreshReg$(_c5, \"GetAccounts\");\n$RefreshReg$(_c6, \"SignForm\");\n$RefreshReg$(_c7, \"GetParams\");\n$RefreshReg$(_c8, \"App\");","map":{"version":3,"sources":["/Users/jason/code/smartcontracts/smart-contracts/devrel/algosigner-react-first/src/App.js"],"names":["Button","Container","Header","Message","Input","Form","Dropdown","React","Component","useState","useCallback","appId","ExampleAlgoSigner","title","buttonText","buttonAction","result","setResult","onClick","r","AlgoSignerSign","AccountsDropdown","options","AlgoSigner","connect","ledger","accts","accounts","i","push","state","SignTransaction","render","props","name","CheckAlgoSigner","action","GetAccounts","JSON","stringify","SignForm","GetParams","algod","path","e","console","error","App"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\nimport './App.css';\nimport {Button, Container, Header, Message, Input, Form, Dropdown} from \"semantic-ui-react\";\nimport React, {Component, useState, useCallback} from \"react\";\n\nconst appId = 13793863;\n/**\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\n * and a message with the result.\n *\n * @param buttonAction is a (potentially async) function called when clicking on the button\n *   and returning the result to be displayed\n */\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\n  const [result, setResult] = useState(\"\");\n\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n\n  return (\n    <>\n      <Header as=\"h2\" dividing>{title}</Header>\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\n      <Message>\n        <code>\n          {result}\n        </code>\n      </Message>\n    </>\n  );\n};\n\n\n\nconst AlgoSignerSign = ({title, buttonText, buttonAction}) => {\n  const [result, setResult] = useState(\"\");\n\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n\n  return (\n    <>\n      <Header as=\"h2\" dividing>{title}</Header>\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\n      <Message>\n        <code>\n          {result}\n        </code>\n      </Message>\n    </>\n  );\n};\n\n\nconst AccountsDropdown = () => {\n  const [options, setResult] = useState(\"\");\n\n  const onClick = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    var result = [];\n\n    for(let i in accts )\n      result.push([i, accts [i]]);\n    setResult(result);\n  }, []);\n\n  return (\n    <>\n    return (\n      <Dropdown\n        onClick={this.onClick}\n        selection\n        options={this.state.options}\n      />\n    )\n    </>\n  );\n};\n\n\n\nclass SignTransaction extends Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n\n// The following components are all demonstrating some features of AlgoSigner\n\nconst CheckAlgoSigner = () => {\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n\n  return <ExampleAlgoSigner title=\"CheckAlgoSigner\" buttonText=\"Check\" buttonAction={action}/>\n};\n\nconst GetAccounts = () => {\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    return JSON.stringify(accts, null, 2);\n  }, []);\n\n  return <ExampleAlgoSigner title=\"Get Accounts\" buttonText=\"Check Wallet Accounts\" buttonAction={action}/>\n};\n\n\n\nconst SignForm = () => {\n   return <Form>\n    <Form.Field>\n      <Input icon='user' iconPosition='left' placeholder='From Account' />\n    </Form.Field>\n    <Form.Field>\n      <Input icon='user' iconPosition='left' placeholder='To Account' />\n    </Form.Field>\n    <Form.Field>\n      <Input icon='money bill alternate' iconPosition='left' placeholder='Amount in microAlgos' />\n    </Form.Field>\n    <Form.Field>\n      <Input icon='sticky note outline' iconPosition='left' placeholder='Enter Note' />\n    </Form.Field>\n\n    <Button primary={true} type='submit'>Submit</Button>\n  </Form>\n};\n\n\n\nconst GetParams = () => {\n  const action = useCallback(async () => {\n    try {\n      const r = await AlgoSigner.algod({\n        ledger: 'TestNet',\n        path: `/v2/transactions/params`\n      });\n      return JSON.stringify(r, null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, []);\n\n  return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\n};\n\n\nconst App = () => {\n  return (\n    <Container className=\"App\">\n      <Header as=\"h1\" dividing>First Transaction React Example</Header>\n      <p>\n        The Pure Stake Team provide many examples using AlgoSigner.\n        See <a\n        href=\"https://purestake.github.io/algosigner-dapp-example\">https://purestake.github.io/algosigner-dapp-example</a> for\n        more examples.\n      </p>\n\n      <SignForm/>\n\n    </Container>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}